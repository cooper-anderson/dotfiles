set nocompatible

set rtp+=~/.fzf

" Begin vim-plug with set directory
call plug#begin('~/.vim/plugged')

Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'tpope/vim-commentary'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'tpope/vim-fugitive'
Plug 'benmills/vimux'
Plug 'Valloric/YouCompleteMe', { 'for': ['python', 'javascript'] }
Plug 'vim-scripts/HJKL'
Plug 'chrisbra/Colorizer'
Plug 'christoomey/vim-tmux-navigator'
Plug 'junegunn/fzf.vim'
Plug 'katono/rogue.vim'
" Plug 'ScrollColors'

" Syntax Plugins
Plug 'vim-scripts/brainfuck-syntax'

" Colorschemes
Plug 'aliou/moriarty.vim'
Plug 'tomasiser/vim-code-dark'
Plug 'Blevs/vim-dzo'
Plug 'dikiaap/minimalist'
Plug 'josuegaleas/jay'
Plug 'dracula/vim'
Plug 'sjl/badwolf'
Plug 'morhetz/gruvbox'
Plug 'nanotech/jellybeans.vim'
Plug 'jacoborus/tender.vim'
Plug 'zeis/vim-kolor'
Plug 'cooper-anderson/tjay.vim'

" Initialize vim-plug system
call plug#end()

set encoding=utf-8
set termencoding=utf-8
set fillchars+=stl:\ ,stlnc:\
if 0
	if empty($TMUX)
		set term=xterm-256color
	else
		set term=screen-256color
	endif
	set t_Co=256
	set t_ut=
endif

if has("gui_running")
   let s:uname = system("uname")
   if s:uname == "Darwin\n"
	   set guifont=Hasklig:h13
   endif
endif

" Load Powerline
set rtp+=/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/powerline/bindings/vim

" Always show statusline
set laststatus=2
set noshowmode
set timeoutlen=1000
set ttimeoutlen=0
" Allow selecting \n character
set virtualedit=onemore
" Keep cursor away from top and bottom edges
set scrolloff=1
" No moving the cursor when leaving insert mode
autocmd InsertLeave * normal `^
" Grady's selecting \n when pressing h to go up a line
if 1
	nnoremap <expr> <End> col([line("."), "$"]) == col(".") ? "<Esc>" : (col	([line("."), "$"]) - col(".")) . "l"
	nmap $ <End>
	noremap <F99> h
	nmap <expr> h col(".") == 1 && col([line(".") - 1, "$"]) > 1 ? "k<End>" : "<F99>"
	nmap <Backspace> h
endif

" Vimux control commands
nnoremap <F5> :w<CR>:call VimuxOpenRunner()<CR>:call VimuxRunCommand("clear; ./" . bufname("."))<CR>:<BACKSPACE>
nnoremap <F6> :call VimuxCloseRunner()<CR>

command! -nargs=1 Silent
\   execute 'silent !' . <q-args>
\ | execute 'redraw!'

" Set :find and :b autocompelte
set path+=**
set wildmenu

if (empty($TMUX)) && 0
  if (has("nvim"))
    let $NVIM_TUI_ENABLE_TRUE_COLOR=1
  endif
  if (has("termguicolors"))
    set termguicolors
  endif
endif

set cursorline
set number
set whichwrap+=<,>,h,l,[,]
set vb t_vb=
set clipboard=unnamed
set backspace=2

set mouse=a
filetype indent on
filetype plugin on
autocmd VimEnter * set autoindent smartindent noexpandtab tabstop=4 shiftwidth=4
set selection=exclusive
" Disable arrow keys in normal mode
map <up> <nop>
map <down> <nop>
map <left> <nop>
map <right> <nop>
" Allow Ctrl-hjlk to move in insert mode
inoremap <C-h> <C-o>h
inoremap <C-l> <C-o>a
inoremap <C-j> <C-o>j
inoremap <C-k> <C-o>k
inoremap <C-^> <C-o><C-^>
" Highlight search results
set hlsearch
nnoremap <silent> <Space> :nohlsearch<Bar>:echo<CR>
noremap <silent> <F10> :NERDTreeToggle<Bar>:echo<CR>
" Stop copy on change motion
nnoremap c "_c
vnoremap c "_c
" Show keystrokes
set showcmd
" Set max height for autocomplete popup
set pumheight=10
" Set YCM to close window after completion
let g:ycm_autoclose_preview_window_after_completion = 1
" Show fzf in current directory with ctrl-t
noremap <C-t> :Files<CR>
" Show fzf preview
let g:fzf_files_options = '--preview "(coderay {} || cat {}) 2> /dev/null | head -'.&lines.'"'
" Remove MacVim scrollbars, if I ever decide to use MacVim
set guioptions=

" Switch iTerm Cursor mode in Insert mode
if 0 && !has('gui')
	if exists('$TMUX')
		let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
		let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=2\x7\<Esc>\\"
	else
		let &t_SI = "\<Esc>]50;CursorShape=1\x7"
		let &t_EI = "\<Esc>]50;CursorShape=2\x7"
	endif
endif

syntax on
set background=dark
colorscheme tjay

