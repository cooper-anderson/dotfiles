set nocompatible

set rtp+=~/.fzf

let useAirline = has("nvim")

" Begin vim-plug with set directory
call plug#begin('~/.vim/plugged')

Plug 'scrooloose/nerdtree' ", { 'on':  'NERDTreeToggle' }
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-speeddating'
Plug 'benmills/vimux'
Plug 'Valloric/ListToggle'
Plug 'lilydjwg/colorizer'
Plug 'vim-scripts/HJKL'
Plug 'christoomey/vim-tmux-navigator'
Plug 'junegunn/fzf.vim'
Plug 'vim-scripts/npm.vim'
Plug 'junegunn/vim-xmark', { 'do': 'make' }
Plug 'machakann/vim-highlightedyank'
Plug 'sagarrakshe/toggle-bool'
Plug 'jiangmiao/auto-pairs'
if has("nvim") " Check for nvim for deoplete and languages
	Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
	Plug 'mitsuse/autocomplete-swift'
	Plug 'Shougo/neco-vim'
endif
if useAirline == 1 || has("nvim")
	Plug 'vim-airline/vim-airline'
	Plug 'vim-airline/vim-airline-themes'
else
	" Plug 'Valloric/YouCompleteMe', { 'for': ['python', 'javascript', 'cs'] }
	" Plug 'jerrymarino/iCompleteMe', { 'for': ['swift'] }
endif

" Syntax Plugins
Plug 'pangloss/vim-javascript'
Plug 'vim-scripts/brainfuck-syntax'
Plug 'keith/swift.vim'

" Colorschemes
Plug 'aliou/moriarty.vim'
Plug 'tomasiser/vim-code-dark'
Plug 'josuegaleas/jay'
Plug 'dracula/vim'
Plug 'sjl/badwolf'
Plug 'cooper-anderson/tjay.vim'


" Initialize vim-plug system
call plug#end()

set encoding=utf-8
set termencoding=utf-8
set fillchars+=stl:\ ,stlnc:\

" if 0
" 	if empty($TMUX)
" 		set term=xterm-256color
" 	else
" 		set term=screen-256color
" 	endif
" 	set t_Co=256
" 	set t_ut=
" endif

if has("gui_running")
	let s:uname = system("uname")
	if s:uname == "Darwin\n"
		set guifont=Hasklig:h13
	endif
endif

function Test()
endfunction

" Load Powerline or Airline
if useAirline == 1
	let g:airline_powerline_fonts = 1
	let g:airline_theme='powerliner'
	let g:airline_skip_empty_sections = 1
	call airline#parts#define_raw('percent', '%3p%%')
	call airline#parts#define_minwidth('percent', 1)
	let g:airline_section_x = airline#section#create_right(["filetype", "%{getfsize(expand(@%))}"])
	let g:airline_section_y = airline#section#create(['percent'])
	let g:airline_section_z = airline#section#create(['linenr', ':%2v'])
	let g:airline_symbols.linenr = 'î‚¡'
else
	set rtp+=/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/powerline/bindings/vim
endif

" set omnifunc=syntaxcomplete#Complete
" Always show statusline
set laststatus=2
" Hide current mode
set noshowmode
" Something about hitting escape?
set timeoutlen=1000
set ttimeoutlen=0
" Allow selecting \n character
set virtualedit=onemore
" Keep cursor away from top and bottom edges
set scrolloff=1
" No moving the cursor when leaving insert mode
autocmd InsertLeave * normal `^
" Set autosearch highlighting
set incsearch
" Set new split to appear below instead of above
set splitbelow
" Grady's selecting \n when pressing h to go up a line
if 1
	nnoremap <expr> <End> col([line("."), "$"]) == col(".") ? "<Esc>" : (col	([line("."), "$"]) - col(".")) . "l"
	nmap $ <End>
	noremap <F99> h
	nmap <expr> h col(".") == 1 && col([line(".") - 1, "$"]) > 1 ? "k<End>" : "<F99>"
	nmap <Backspace> h
endif

" Vimux control commands
nnoremap <F5> :w<CR>:call VimuxOpenRunner()<CR>:call VimuxRunCommand("clear; ./" . bufname("."))<CR>:<BACKSPACE>
autocmd Filetype javascript,html :nnoremap <F5> :call VimuxOpenRunner()<CR>:call VimuxRunCommand("clear; npm start")<CR>:<BACKSPACE>
nnoremap <F6> :call VimuxCloseRunner()<CR>

command! -nargs=1 Silent
\   execute 'silent !' . <q-args>
\ | execute 'redraw!'

" Set :find and :b autocompelte
set path+=**
set wildmenu

" if (empty($TMUX)) && 0
"   if (has("nvim"))
"     let $NVIM_TUI_ENABLE_TRUE_COLOR=1
"   endif
"   if (has("termguicolors"))
"     set termguicolors
"   endif
" endif

set cursorline
set number
set whichwrap+=<,>,h,l,[,]
set vb t_vb=
set clipboard=unnamed
set backspace=2

set mouse=a
filetype indent on
filetype plugin on
autocmd VimEnter * set autoindent smartindent noexpandtab tabstop=4 shiftwidth=4 shiftround
set selection=exclusive
" Disable arrow keys in normal mode
map <up> <nop>
map <down> <nop>
map <left> <nop>
map <right> <nop>
" Disable Arrow keys in Insert mode
" imap <up> <nop>
" imap <down> <nop>
" imap <left> <nop>
" imap <right> <nop>
" Allow Ctrl-hjlk to move in insert mode
inoremap <C-h> <C-o>h
inoremap <C-l> <C-o>a
inoremap <C-j> <C-o>j
inoremap <C-k> <C-o>k
inoremap <C-^> <C-o><C-^>
" Highlight search results
set hlsearch
nnoremap <silent> <Space> :nohlsearch<Bar>:echo<CR>
noremap <silent> <F10> :NERDTreeToggle<Bar>:echo<CR>
" Stop copy on change motion
nnoremap c "_c
vnoremap c "_c
" Show keystrokes
set showcmd
" Set max height for autocomplete popup
set pumheight=10
" Set YCM to close window after completion
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_enable_diagnostic_signs = 0
let g:ycm_auto_start_csharp_server = 1
let g:ycm_auto_stop_csharp_server = 1
let g:ycm_always_populate_location_list = 1
" Set YCM filter diagnostics
let g:ycm_filter_diagnostics = {
\ "cs": {
\ "regex": [".*Name should have prefix '_'.*", ".*Using directive is not used by code and can be removed safely.*"]
\    }
\ }
map <F7> :YcmForceCompileAndDiagnostics<CR>
map <F8> :YcmRestartServer<CR>
" Set ListToggle height
let g:lt_height = 4
" Show fzf in current directory with ctrl-t
noremap <C-t> :Files<CR>
" Show fzf preview
let g:fzf_files_options = '--preview "(coderay {} || cat {}) 2> /dev/null | head -'.&lines.'"'
" Hide npm output
let g:npm_background = 1
" Remove MacVim scrollbars, if I ever decide to use MacVim
set guioptions=
" Setup vim-highlightedyank options
map y <Plug>(highlightedyank)
let g:highlightedyank_highlight_duration = 250
" Hide NERDTree help line
let NERDTreeMinimalUI=1
" Use deoplete.
let g:deoplete#enable_at_startup = 1
let g:deoplete#auto_complete_delay = 0
" Jump to the first placeholder by typing `<C-k>`.
autocmd FileType swift imap <buffer> <C-k> <Plug>(autocomplete_swift_jump_to_placeholder)

" Switch iTerm Cursor mode in Insert mode

syntax on
set background=dark
colorscheme tjay

